# ===========================================================
#
# Mutation stat checker - Main program
#
# Author: Guillaume Steveny
# Year: 2023 -- 2024
#
# ===========================================================

from __future__ import annotations
import argparse
import os
import re

if __name__ == "__main__":
    # Parse the command line argument
    parser = argparse.ArgumentParser(description="Programming allowing to have some basic stat about a split of "
                                                 "mutants generated by the mutation_labelling program.\n"
                                                 "Author: Guillaume Steveny ; Year: 2023-2024")

    parser.add_argument("-ig", "--ignore_global", action="store_true",
                        help="Specify if the global stats should not be displayed.")

    parser.add_argument("-ic", "--ignore_class", action="store_true",
                        help="Specify if the class stats should not be displayed.")

    parser.add_argument("path", type=str, action="store",
                        help="Directory in which the train, test and validation 'txt' files can be found.")

    args = parser.parse_args()

    # --------------------------------
    # File information
    path = args.path + os.sep
    suffix = ".txt"

    # Each type of files
    files = ["train", "validation", "test"]

    # Each of the possibly associated labels
    labels = {}

    # Result for each of the mutant generated file
    result = {}
    # Total number of examples for each file
    tot_values = {}
    # Total number of examples
    tot_examples = 0

    # Regex pattern to split the code and the labels
    # Group 1 will by the labels
    pattern = re.compile("\$x\$ (.*)")

    # Try to open each of the file in the path
    try:
        for f in files:
            with open(path+f+suffix, "r", encoding="utf8") as file:
                result[f] = file.read()
    except Exception as e:
        raise ValueError("The directory you gave doesn't contain one of the required file. Check the parameter and the "
                         "directory content.")

    # Go over each content of the train, test and validation files, compute each stat
    for k in files:
        # Get the number of examples in this file (the number of $x$)
        tot_values[k] = result[k].count("$x$")
        # Update the total number of examples
        tot_examples += tot_values[k]
        # Get all the labels matched
        all_matches: list[str] = pattern.findall(result[k])
        for matches in all_matches:
            # Get the labels associated with each example
            label = matches.split("$x$ ")[-1].strip()
            # Add an entry for the label if it does not already exist
            if label not in labels:
                labels[label] = {}
            # Update the count for this label
            labels[label][k] = labels[label].get(k, 0) + 1

    # Show the information to the user if requested
    if not args.ignore_global:
        print("Number of examples")
        for k in files:
            print(f"\t{k:<11}:\t{tot_values[k]:>5}")
        print(f"\ttotal      :\t{tot_examples:>5}")
        print()

    # Show the class information to the user if requested
    if not args.ignore_class:
        print("Number of classes")
        # Go over each stored label
        for l in labels:
            # Show this label name to the user
            print("\t"+l)
            # Get the total count of associated files
            total_count = 0
            # Go over each of the files
            for k in files:
                # Get the number of examples
                count = labels[l].get(k, 0)
                # Update the total count for this class
                total_count += count
                # Get the percentage
                prop = count / tot_values[k]
                # Show the information to the user
                print(f"\t\t{k:<11}:\t{count:>5} (~{prop:.3f})")
            print(f"\t\ttotal      :\t{total_count:>5} (~{total_count/tot_examples:.3f})")
            print()
